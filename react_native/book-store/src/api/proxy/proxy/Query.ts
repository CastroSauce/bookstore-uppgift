//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../proxy';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './Client'
export { Client };
import type { AxiosRequestConfig } from 'axios';

export type BookDELETEQueryParameters = {
  id: string ;
}

export function bookDELETEUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/Book/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function bookDELETEMutationKey(id: string): MutationKey {
  return trimArrayEnd([
      'Client',
      'bookDELETE',
      id as any,
    ]);
}

/**
 * @return Success
 */
export function useBookDELETEMutation<TContext>(id: string, options?: Omit<UseMutationOptions<string, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<string, unknown, void, TContext> {
  const key = bookDELETEMutationKey(id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.bookDELETE(id),
    mutationKey: key,
  });
}
  
type BookDELETE__MutationParameters = BookDELETEQueryParameters

/**
 * @return Success
 */
export function useBookDELETEMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<string, unknown, BookDELETE__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: BookDELETEQueryParameters}): UseMutationResult<string, unknown, BookDELETE__MutationParameters, TContext> {
  const key = bookDELETEMutationKey(options?.parameters?.id!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: BookDELETE__MutationParameters) => Client.bookDELETE(data.id ?? options?.parameters?.id!),
  mutationKey: key,
});
}
  
export function bookAllUrl(): string {
  let url_ = getBaseUrl() + "/api/Book";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let bookAllDefaultOptions: Omit<UseQueryOptions<Types.BookDto[], unknown, Types.BookDto[]>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.BookDto[], unknown, Types.BookDto[]>, 'queryFn'>> = {
};
export function getBookAllDefaultOptions() {
  return bookAllDefaultOptions;
};
export function setBookAllDefaultOptions(options: typeof bookAllDefaultOptions) {
  bookAllDefaultOptions = options;
}

export function bookAllQueryKey(): QueryKey;
export function bookAllQueryKey(...params: any[]): QueryKey {
  return trimArrayEnd([
      'Client',
      'bookAll',
    ]);
}
export function __bookAll(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.bookAll(
axiosConfig    );
}

/**
 * @return Success
 */
export function useBookAllQuery<TSelectData = Types.BookDto[], TError = unknown>(options?: Omit<UseQueryOptions<Types.BookDto[], TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useBookAllQuery<TSelectData = Types.BookDto[], TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.BookDto[], TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  

  options = params[0] as any;
  axiosConfig = params[1] as any;

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.BookDto[], TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __bookAll(context, axiosConfig) : __bookAll,
    queryKey: bookAllQueryKey(),
    ...bookAllDefaultOptions as unknown as Omit<UseQueryOptions<Types.BookDto[], TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * @return Success
 */
export function setBookAllData(queryClient: QueryClient, updater: (data: Types.BookDto[] | undefined) => Types.BookDto[], ) {
  queryClient.setQueryData(bookAllQueryKey(),
    updater
  );
}

/**
 * @return Success
 */
export function setBookAllDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.BookDto[] | undefined) => Types.BookDto[]) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function bookPOSTUrl(): string {
  let url_ = getBaseUrl() + "/api/Book";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function bookPOSTMutationKey(): MutationKey {
  return trimArrayEnd([
      'Client',
      'bookPOST',
    ]);
}

/**
 * @param body (optional) 
 * @return Success
 */
export function useBookPOSTMutation<TContext>(options?: Omit<UseMutationOptions<Types.BookDto, unknown, Types.BookInput, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.BookDto, unknown, Types.BookInput, TContext> {
  const key = bookPOSTMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.BookInput) => Client.bookPOST(body),
    mutationKey: key,
  });
}